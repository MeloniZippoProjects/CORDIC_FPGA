library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

-- Testbench for the cordic_atan network
-- Instantiates the generic parameters, and performs various computation tests:
	-- atan(1/2) = 0.463648
	-- atan(1) = 0.785398
	-- atan(3) = 1.249046
-- This are expected values, obtainable with lower errors as bit resolution increases

entity tb_cordic is
end tb_cordic;

architecture beh_tb_cordic of tb_cordic is

	component cordic_atan
		generic(Hbits : positive := 12; Kbits :positive := 12; N_iterations : positive := 8);
		port (
			den		: in std_ulogic_vector(Hbits-1 downto 0);
			num		: in std_ulogic_vector(Hbits-1 downto 0);
			clk 	: in std_ulogic;
			ris 	: out std_ulogic_vector(Kbits-1 downto 0);
			reset 	: in std_ulogic -- active high
		);
	end component;
	
	signal clk : std_ulogic := '0';
	signal reset : std_ulogic;
	
	constant Hbits : positive := 32;
	constant Kbits : positive := 32;
	constant N_iterations : positive := 32;

	signal den		: std_ulogic_vector(Hbits-1 downto 0);
	signal num		: std_ulogic_vector(Hbits-1 downto 0);
	signal ris 		: std_ulogic_vector(Kbits-1 downto 0);

	signal real_ris : real;

begin

	clk <= not clk after 50 ns;
	
	real_ris <= real(to_integer(signed(ris))) * real(2)**(-(Kbits - 2));

	i_cordic : cordic_atan
		generic map(Hbits => Hbits, Kbits => Kbits, N_iterations => N_iterations)
		port map(
			den => den,
			num => num,
			ris => ris,
			clk => clk,
			reset => reset
		);

	drive_p : process
	begin
			reset <= '1';
			num <= x"2000_0000";
			den <= x"4000_0000";
			wait until rising_edge(clk);
			reset <= '0';
		wait for 1.6 us;
			num <= x"7FFF_FFFF";
			den <= x"7FFF_FFFF";
		wait for 1.6 us;
			num <= x"6000_0000";
			den <= x"2000_0000";
		wait;
	end process;
end beh_tb_cordic;